version: "3.1"
services:
  nginx:
    container_name: hubii_nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    restart: unless-stopped
    # user: "nginx:nginx"
    ports:
      - 80:80
      - 443:443
    networks:
      - hubii_dev
    volumes:
      - ./nginx/config/certs:/etc/nginx/certs
      - ./nginx/config/conf.d:/etc/nginx/conf.d
      - ./nginx/config/nginx.conf:/etc/nginx/nginx.conf
      - ./home:/var/www/html
      # - ./logs/nginx:/var/log/nginx
    depends_on:
      - laravel_product
      - keycloak
  laravel_product:
    container_name: hubii_api_product
    build:
      context: ./apache
      dockerfile: Dockerfile
      args:
        WWWGROUP: ${WWWGROUP}
    ports:
      - '8001:80'
      - '${VITE_PORT:-5173}:${VITE_PORT:-5173}'
    environment:
      WWWUSER: ${WWWUSER}
      LARAVEL_SAIL: 1
      XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
      XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
      # IGNITION_LOCAL_SITES_PATH: '${PWD}/api-product'
    volumes:
      - ./api-product:/var/www/html
    networks:
      - hubii_dev
    depends_on:
      - db
      - redis
      - kafka
  # laravel_order:
  #   container_name: hubii_api_order
  #   build:
  #     context: ./api-order/vendor/laravel/sail/runtimes/8.2
  #     dockerfile: Dockerfile
  #     args:
  #       WWWGROUP: '${WWWGROUP}'
  #   image: sail-8.2/app
  #   extra_hosts:
  #     - 'host.docker.internal:host-gateway'
  #   ports:
  #     - '8002:80'
  #   environment:
  #     WWWUSER: '${WWWUSER}'
  #     LARAVEL_SAIL: 1
  #     XDEBUG_MODE: 'develop,debug,coverage'
  #     XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
  #     IGNITION_LOCAL_SITES_PATH: '${PWD}'
  #   volumes:
  #     - ./api-order:/var/www/html
  #   networks:
  #     - hubii_dev
  #   depends_on:
  #     - db
  laravel_integration:
    container_name: hubii_api_integration
    build:
      context: ./apache
      dockerfile: Dockerfile
      args:
        WWWGROUP: ${WWWGROUP}
    image: sail-8.3/app
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    # command: 
    #   - php artisan queue:work --queue=integration_queue
    ports:
      - '8003:80'
      - '${VITE_PORT:-5174}:${VITE_PORT:-5173}'
    environment:
      WWWUSER: ${WWWUSER}
      LARAVEL_SAIL: 1
      XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
      XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
      # IGNITION_LOCAL_SITES_PATH: '${PWD}/api-product'
    volumes:
      - ./api-integration:/var/www/html
    networks:
      - hubii_dev
    depends_on:
      - db
      - redis
      - kafka
  redis:
    container_name: hubii_redis
    image: 'redis:alpine'
    restart: unless-stopped
    ports:
      - '${FORWARD_REDIS_PORT:-6379}:6379'
    volumes:
      - './redis/data:/data'
    networks:
      - hubii_dev
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      retries: 3
      timeout: 5s
  keycloak:
    image: quay.io/keycloak/keycloak:23.0.4
    container_name: hubii_keycloak
    restart: unless-stopped
    # volumes:
    #   - ./keycloak/data:/opt/keycloak/data/
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin    
      KC_DB: "mysql"
      KC_DB_URL: 'jdbc:mysql://hubii_mysql:3306/hubii_keycloak'
      KC_DB_USERNAME: root
      KC_DB_PASSWORD: root      
      KC_HOSTNAME_STRICT: false
      KC_PROXY: edge
    # entrypoint: /opt/keycloak/bin/kc.sh start-dev 
    command: [ "start-dev"]
    ports:
      - 8080:8080
    depends_on:
      - db
    networks:
      - hubii_dev
  db:
    container_name: hubii_mysql
    image: mysql:8.0.35
    restart: unless-stopped
    volumes:
      - 'hubbi-mysql:/var/lib/mysql'
      - ./mysql/data/init-scripts:/docker-entrypoint-initdb.d      
      # - ./mysql/data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: root
      # MYSQL_DATABASE: hubii_keycloak,hubii_products,hubii_orders
      MYSQL_USER: hubii
      MYSQL_PASSWORD: hubii
    ports:
      - "3308:3306"
    networks:
      - hubii_dev

      zookeeper:
        image: confluentinc/cp-zookeeper:6.2.0
        container_name: zookeeper
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000

    kafka:
        image: confluentinc/cp-kafka:6.2.0
        hostname: kafka
        container_name: kafka
        depends_on:
            - zookeeper
        ports:
            - "29092:29092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            CONFLUENT_METRICS_ENABLE: 'false'
            KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1

    schema-registry:
        image: confluentinc/cp-schema-registry:6.2.0
        hostname: schema-registry
        container_name: schema-registry
        depends_on:
            - zookeeper
            - kafka
        ports:
            - "8081:8081"
        environment:
            SCHEMA_REGISTRY_HOST_NAME: schema-registry
            SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8081'
            SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'

    # mysql:
    #     image: debezium/example-mysql:1.2
    #     container_name: mysql
    #     ports:
    #         - 3307:3306
    #     environment:
    #         - MYSQL_ROOT_PASSWORD=debezium
    #         - MYSQL_USER=mysqluser
    #         - MYSQL_PASSWORD=mysqlpw
    #     volumes:
    #         - ${PWD}/data/movies.sql:/docker-entrypoint-initdb.d/z99_dump.sql

    connect-debezium:
        image: debezium/connect:1.6
        container_name: connect-debezium
        depends_on:
            - kafka
            - mysql
            - schema-registry
        ports:
            - 8083:8083
        environment:
            BOOTSTRAP_SERVERS: kafka:9092
            GROUP_ID: connect-debezium
            CONFIG_STORAGE_TOPIC: docker-connect-debezium-configs
            OFFSET_STORAGE_TOPIC: docker-connect-debezium-offsets
            STATUS_STORAGE_TOPIC: docker-connect-debezium-status
            KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
            VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
            CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
            CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
        volumes:
            - ${PWD}/scripts:/scripts

    kafka-manager:
        image: hlebalbau/kafka-manager:latest
        container_name: kafka-manager
        depends_on:
            - kafka
        ports:
            - "9000:9000"
        environment:
            - ZK_HOSTS=zookeeper:2181
            - APPLICATION_SECRET=letmein

networks:
  hubii_dev:
  broker-kafka:
    driver: bridge        

volumes:
  hubbi-mysql:
      driver: local
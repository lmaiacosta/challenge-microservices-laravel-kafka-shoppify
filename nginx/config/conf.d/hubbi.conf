

server {
    listen 80;
    server_name _;

    # redirect all http request to https
    rewrite ^/(.*)$ https://$host$request_uri?permanent;
}

server {
    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    # Specify the logging configuration
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    sendfile off;

    client_max_body_size 100m;
    
    server_name hubii.local;
    listen 443 ssl;
    ssl_certificate /etc/nginx/certs/hubii.local.pem;
    ssl_certificate_key /etc/nginx/certs/hubii.local.key.pem;
    # ssl_trusted_certificate /etc/nginx/certs/rootCA.pem;
    ssl_trusted_certificate /etc/nginx/certs/rootCA.pem;

    # ssl_verify_client on;  # Enable client certificate verification
    # ssl_client_certificate /etc/nginx/certs/client-ca.pem;  # Specify the client CA certificate

    # Other SSL
    # Use TLS protocols 1.2 and 1.3
    ssl_protocols TLSv1.2 TLSv1.3;

    # Use modern and secure ciphers
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';

    # Enable Perfect Forward Secrecy (PFS)
    ssl_dhparam /etc/nginx/certs/dhparam.pem;
    ssl_ecdh_curve secp384r1;
    ssl_prefer_server_ciphers on;

    # error_log  /var/log/nginx/error.log;
    # access_log /var/log/nginx/access.log;
    root /var/www/html;
    index index.html;
    location / {
        try_files $uri $uri/ /index.html;
    }
}


server {


    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    sendfile off;

    client_max_body_size 100m;
    
    
    server_name product.hubii.local;
    listen 443 ssl;
    ssl_certificate /etc/nginx/certs/hubii.local.pem;
    ssl_certificate_key /etc/nginx/certs/hubii.local.key.pem;
    ssl_trusted_certificate /etc/nginx/certs/rootCA.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_dhparam /etc/nginx/certs/dhparam.pem;
    ssl_ecdh_curve secp384r1;
    ssl_prefer_server_ciphers on;

    location / {
        proxy_pass http://hubii_api_product;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
    }

    # Additional configurations for static files, if needed
    # location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
    #     expires max;
    #     log_not_found off;
    # }
}



server {


    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    sendfile off;

    client_max_body_size 100m;
    
    
    server_name integration.hubii.local;
    listen 443 ssl;
    ssl_certificate /etc/nginx/certs/hubii.local.pem;
    ssl_certificate_key /etc/nginx/certs/hubii.local.key.pem;
    ssl_trusted_certificate /etc/nginx/certs/rootCA.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_dhparam /etc/nginx/certs/dhparam.pem;
    ssl_ecdh_curve secp384r1;
    ssl_prefer_server_ciphers on;

    location / {
        proxy_pass http://hubii_api_integration;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
    }

    # Additional configurations for static files, if needed
    # location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
    #     expires max;
    #     log_not_found off;
    # }
}

# upstream keycloak-container {
#     server keycloak.:8080;
# }

server {
    server_name keycloak.hubii.local;
    listen 443 ssl;
    ssl_certificate /etc/nginx/certs/hubii.local.pem;
    ssl_certificate_key /etc/nginx/certs/hubii.local.key.pem;
    ssl_trusted_certificate /etc/nginx/certs/rootCA.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_dhparam /etc/nginx/certs/dhparam.pem;
    ssl_ecdh_curve secp384r1;
    ssl_prefer_server_ciphers on;

    location / {
        proxy_pass http://hubii_keycloak:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
    }

    # Additional configurations for static files, if needed
    # location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
    #     expires max;
    #     log_not_found off;
    # }    
}